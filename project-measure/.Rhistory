measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$swinging);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff > 0.00){
same = same +1;
} else{
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff < 0.00){
same = same +1;
} else{
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = measure.rl$right.arm - measure.rl$left.arm; #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$swinging);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff > 0.00){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff < 0.00){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff < 0.00){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff > 0.00){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
count.table.hand;
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = measure.rl$right.arm - measure.rl$left.arm; #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
str(measure.rl.diff)
View(measure.rl.diff)
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = measure.rl$right.arm - measure.rl$left.arm; #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = Round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
measure.rl$RminusL.hand.diff = Round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl$RminusL.hand.diff = round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
measure.rl.diff = na.omit(measure.rl.diff);
str(measure.rl.diff)
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = round((measure.rl$right.arm - measure.rl$left.arm), 2); #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$swinging);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff > 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff < 0){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff < 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff > 0){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
count.table.hand;
ndiffs = length(measure.rl.diff$writing);
same = 0;
different = 0;
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff > 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff < 0){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff < 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff > 0){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
count.table.hand;
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = round((measure.rl$right.arm - measure.rl$left.arm), 2); #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$writing);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff > 0.00){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff < 0.00){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff < 0.00){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff > 0.00){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
count.table.hand;
colnames(count.table.hand) = c("Dominant Hand Larger", "Dominant Hand Smaller");
rownames(count.table.hand) = c("Count");
str(measure.rl.diff)
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = round((measure.rl$right.arm - measure.rl$left.arm), 2); #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$writing);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(is.negative(measure.rl.diff$RminusL.hand.diff) != T){
same = same +1;
} else if(is.negative(measure.rl.diff$RminusL.hand.diff) != F){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(is.negative(measure.rl.diff$RminusL.hand.diff) != F){
same = same +1;
} else if(is.negative(measure.rl.diff$RminusL.hand.diff) != T){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
measure.rl = measure.df[,c(4,7,18:21,22:25)]; #separate variables of interest
#calculate arm length
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = round((measure.rl$right.arm - measure.rl$left.arm), 2); #positive value if right arm is bigger
measure.rl$RminusL.hand.diff = round((measure.rl$hand.length.right - measure.rl$hand.length.left),2);
measure.rl.diff = measure.rl[,c(1,2,9,10)];
str(measure.rl.diff)
measure.rl.diff = na.omit(measure.rl.diff);
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$writing);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$writing[i] == "right"){
if(measure.rl.diff$RminusL.hand.diff[i] > 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff[i] < 0){
different = different +1;
}
} else if(measure.rl.diff$writing[i] == "left"){
if(measure.rl.diff$RminusL.hand.diff[i] < 0){
same = same +1;
} else if(measure.rl.diff$RminusL.hand.diff[i] > 0){
different = different +1;
}
}
count.table.hand[1,1] = same;
count.table.hand[1,2] = different;
}
count.table.hand;
colnames(count.table.hand) = c("Dominant Hand Larger", "Dominant Hand Smaller");
rownames(count.table.hand) = c("Count");
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$swinging);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.hand = matrix(ncol =2);
if(measure.rl.diff$swinging[i] == "right"){
if(measure.rl.diff$RminusL.arm.diff[i] > 0){
same = same +1;
} else if(measure.rl.diff$RminusL.arm.diff[i] < 0){
different = different +1;
}
} else if(measure.rl.diff$swinging[i] == "left"){
if(measure.rl.diff$RminusL.arm.diff[i] < 0){
same = same +1;
} else if(measure.rl.diff$RminusL.arm.diff[i] > 0){
different = different +1;
}
}
count.table.arm[1,1] = same;
count.table.arm[1,2] = different;
}
same = 0;
different = 0;
ndiffs = length(measure.rl.diff$swinging);
for (i in 1:ndiffs) {
names = c("Same", "Different")
count.table.arm = matrix(ncol =2);
if(measure.rl.diff$swinging[i] == "right"){
if(measure.rl.diff$RminusL.arm.diff[i] > 0){
same = same +1;
} else if(measure.rl.diff$RminusL.arm.diff[i] < 0){
different = different +1;
}
} else if(measure.rl.diff$swinging[i] == "left"){
if(measure.rl.diff$RminusL.arm.diff[i] < 0){
same = same +1;
} else if(measure.rl.diff$RminusL.arm.diff[i] > 0){
different = different +1;
}
}
count.table.arm[1,1] = same;
count.table.arm[1,2] = different;
}
colnames(count.table.arm) = c("Dominant Hand Larger", "Dominant Hand Smaller");
rownames(count.table.arm) = c("Count");
count.table.arm;
View(measure.climbers)
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
climbers = column_to_rownames(measure.climbers$Climber);
climbers = column_to_rownames(measure.climbers, Climber);
climbers = column_to_rownames(measure.climbers, measure.climbers$Climber);
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = column_to_rownames(.data = measure.climbers, var = Climber);
View(measure.climbers)
measure.climbers = column_to_rownames(.data = measure.climbers, var = 1);
measure.climbers = column_to_rownames(.data = measure.climbers, var = measure.climbers$Climber);
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = column_to_rownames(.data = measure.climbers, var = measure.climbers$Climber);
climbers = measure.climbers$Climber;
rownames(measure.climbers) = climbers;
View(measure.climbers)
measure.climbers = measure.climbers[,c(2:4)];
View(measure.climbers)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
rownames(measure.rq2) = rownames(measure.df);
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
View(measure.rq2)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
rownames(measure.rq2) = rownames(measure.df);
View(measure.rq2)
rownames(measure.rq2) = measure.df$person_id;
rownames(measure.rq2) =
unique(measure.df$person_id);
rownames(measure.rq2) =
unique(measure.df$person_id);
unique(measure.df$person_id);
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, sep="|");
source(file = "https://raw.githubusercontent.com/lindseymaek/STAT419/master/functions/functions-project-measure.R",local = F);
measure.df = prepareMeasureData(measure);
measure.collapsed = measure.df[,c(15:17,28,35, 38:46)]
names = colnames(measure.collapsed);
summary = summarizeMeanSD(measure.collapsed);
mean = t(summary[1,]);
sd = t(summary[2,]);
measure.scale = measure.collapsed/measure.collapsed[,1];
my.corr = rcorr( as.matrix(measure.scale), type="pearson");
#str(my.corr);
my.corr.r = my.corr$r;
my.corr.pval = my.corr$P;
my.corr.r.2 = round(my.corr.r,2);
my.corr.p.3 = as.numeric( round(my.corr.pval,3) ); # flatten
cuts = c(0.10, 0.05, 0.01, 0.001);
symb = c("+", "*", "**", "***");
my.corr.p.3.symb = "";
my.corr.p.3.symb[is.na(my.corr.p.3)] = "";
my.corr.p.3.symb[my.corr.p.3 <= 0.10] = "+";
my.corr.p.3.symb[my.corr.p.3 <= 0.05] = "*";
my.corr.p.3.symb[my.corr.p.3 <= 0.01] = "**";
my.corr.p.3.symb[my.corr.p.3 <= 0.001] = "***";
include.diag = FALSE;  # the 1's on the diagonal are not included
# this is a lower triangular form ...
char.matrix = as.character(my.corr.r.2);
my.matrix = matrix(
paste0(char.matrix, my.corr.p.3.symb),
nrow=ncol(measure.collapsed));
my.matrix = as.data.frame(my.matrix);
colnames(my.matrix) = names;
rownames(my.matrix) = names;
my.matrix$mean = mean;
my.matrix$sd = sd[1,];
my.matrix = my.matrix[,c(15,16,1:14)];
my.matrix;
#Question - How do ape index measurements of accomplished rock climbers compare to our class dataset?
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
climbers = measure.climbers$Climber;
rownames(measure.climbers) = climbers;
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
mean(measure.df$ape.index)
sd(measure.df$ape.index)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
#rownames(measure.rq2)
unique(measure.df$person_id);
View(measure.df)
why = measure.df$person_id
View(measure.df)
why = unique(measure.df$person_id)
measure.df
View(measure.df)
#Question - How do ape index measurements of accomplished rock climbers compare to our class dataset?
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
climbers = measure.climbers$Climber;
rownames(measure.climbers) = climbers;
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
mean(measure.df$ape.index)
sd(measure.df$ape.index)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
rownames(measure.rq2) = rownames(measure.df);
measure.rq2 = as.data.frame(rbind(measure.climbers,measure.rq2));
View(measure.climbers)
colnames(measure.climbers) = c("height.NA", "arm.span.NA", "ape.index");
measure.rq2 = as.data.frame(rbind(measure.climbers,measure.rq2));
View(measure.climbers)
#Question - How do ape index measurements of accomplished rock climbers compare to our class dataset?
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
climbers = measure.climbers$Climber;
rownames(measure.climbers) = climbers;
measure.climbers = measure.climbers[,c(2:4)];
colnames(measure.climbers) = c("height.NA", "arm.span.NA", "ape.index");
summarizeMeanSD(measure.climbers);
mean(measure.df$ape.index)
sd(measure.df$ape.index)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
rownames(measure.rq2) = rownames(measure.df);
colnames(measure.rq2) = c("height.NA", "arm.span.NA", "ape.index");
measure.rq2 = as.data.frame(rbind(measure.climbers,measure.rq2));
View(measure.rq2)
measure.rq2 = na.omit(measure.rq2);
m.kmeans = kmeans(measure.rq2, 5);
m.kmeans
str(m.kmeans)
print(m.kmeans);
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = c("height.NA", "arm.span.NA", "ape.index");
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
membership;
print( table(membership) ) ;
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = c("height.NA", "arm.span.NA", "ape.index");
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = c("height.NA", "arm.span.NA", "ape.index");
str(m.kmeans)
m.kmeans$cluster
rownames(membership) = rownames(measure.rq2);
membership;
print( table(membership) ) ;
#Question - How do ape index measurements of accomplished rock climbers compare to our class dataset?
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
climbers = measure.climbers$Climber;
rownames(measure.climbers) = climbers;
measure.climbers = measure.climbers[,c(2:4)];
colnames(measure.climbers) = c("height.NA", "arm.span.NA", "ape.index");
summarizeMeanSD(measure.climbers);
mean(measure.df$ape.index)
sd(measure.df$ape.index)
measure.rq2 = as.data.frame(cbind(measure.df$height.NA, measure.df$arm.span.NA, measure.df$ape.index));
rownames(measure.rq2) = rownames(measure.df);
colnames(measure.rq2) = c("height.NA", "arm.span.NA", "ape.index");
measure.rq2 = as.data.frame(rbind(measure.climbers,measure.rq2));
measure.rq2 = na.omit(measure.rq2);
m.kmeans = kmeans(measure.rq2, 5);
m.kmeans
m.kmeans$cluster
print(m.kmeans);
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = rownames(measure.rq2);
membership;
print( table(membership) ) ;
m.kmeans
m.kmeans$centers
m.kmeans$centers;
print(m.kmeans);
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = rownames(measure.rq2);
membership;
print( table(membership) ) ;
m.kmeans$centers;
membership = as.data.frame( matrix( m.kmeans$cluster, ncol=1)) ;
rownames(membership) = rownames(measure.rq2);
membership;
print( table(membership) ) ;
kable(my.matrix, caption = "STAT 419 Measure Means, SD, and Correlation Analysis")
library(knitr)
kable(my.matrix, caption = "STAT 419 Measure Means, SD, and Correlation Analysis")
kable(my.matrix, format = "latex", caption = "My table", table.envir = "table*")
kable(my.matrix, format = "latex", caption = "My table")
kable(my.matrix, format = "simple", caption = "My table")
kable(my.matrix, format = "rst", caption = "My table")
kable(my.matrix, format = "latex", caption = "My table")
table =kable(my.matrix, format = "latex", caption = "My table")
table
table =kable(my.matrix, format = "html", caption = "My table")
table
table(my.matrix);
as.table(my.matrix);
my.matrix;
measure.collapsed = measure.df[,c(15:17,28,35, 38:46)]
names = colnames(measure.collapsed);
summary = summarizeMeanSD(measure.collapsed);
mean = t(summary[1,]);
sd = t(summary[2,]);
measure.scale = measure.collapsed/measure.collapsed[,1];
my.corr = rcorr( as.matrix(measure.scale), type="pearson");
#str(my.corr);
my.corr.r = my.corr$r;
my.corr.pval = my.corr$P;
my.corr.r.2 = round(my.corr.r,2);
my.corr.p.3 = as.numeric( round(my.corr.pval,3) ); # flatten
cuts = c(0.10, 0.05, 0.01, 0.001);
symb = c("+", "*", "**", "***");
my.corr.p.3.symb = "";
my.corr.p.3.symb[is.na(my.corr.p.3)] = "";
my.corr.p.3.symb[my.corr.p.3 <= 0.10] = "+";
my.corr.p.3.symb[my.corr.p.3 <= 0.05] = "*";
my.corr.p.3.symb[my.corr.p.3 <= 0.01] = "**";
my.corr.p.3.symb[my.corr.p.3 <= 0.001] = "***";
include.diag = FALSE;  # the 1's on the diagonal are not included
# this is a lower triangular form ...
char.matrix = as.character(my.corr.r.2);
my.matrix = matrix(
paste0(char.matrix, my.corr.p.3.symb),
nrow=ncol(measure.collapsed));
my.matrix = as.data.frame(my.matrix);
colnames(my.matrix) = names;
rownames(my.matrix) = names;
my.matrix$mean = mean;
my.matrix$sd = sd[1,];
my.matrix = my.matrix[,c(15,16,1:14)];
my.matrix;
kable(my.matrix,
format = "latex", booktabs = TRUE) %>%
kableExtra::landscape()
library(kableExtra);
kable(summary, format = "latex")
summary(measure.df);
kable(summary(measure.df));
kable(summary(measure.df[,c(1:4)]));
