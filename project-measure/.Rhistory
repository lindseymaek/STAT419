if(nums$units[i] == "cm"){
nums[i,c(2:num.cols)] = cm.to.in(nums[i, c(2:num.cols)]);
}
}
nums;
}
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side))
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color))
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging))
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging))
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging))
#
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye
lowerCaseFactors$eye_color[87] = miscolor
measure = measure[, -which(names(measure) %in% names(filter))]
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure$units = as.factor(gsub("cm", "in", measure$units));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.clean = cleanStudentMeasureData(measure);
summary(measure.clean);
View(measure.clean)
measure = measure[filter(height.NA == 182.88) %>% gsub("in", "cm", measure$units),]
##fix mislabeled units
measure = measure[filter(measure$height.NA == 182.88) %>% gsub("in", "cm", measure$units),]
##fix mislabeled units
measure = measure[filter(measure$notes == "converted from inches") %>% gsub("in", "cm", measure$units),]
lowerCaseFactors = lowerCaseFactors[filter(lowerCaseFactors$notes == "converted from inches") %>%gsub("in", "cm", measure$units), ]
lowerCaseFactors.switched unites = lowerCaseFactors %>% filter(lowerCaseFactors$notes == "converted from inches") %>%gsub("in", "cm", measure$units)
lowerCaseFactors.switchedunits = lowerCaseFactors %>% filter(lowerCaseFactors$notes == "converted from inches") %>%gsub("in", "cm", measure$units)
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors.switchedunits = lowerCaseFactors %>% filter(lowerCaseFactors$notes == "converted from inches") %>%gsub("in", "cm", measure$units)
lowerCaseFactors.switchedunits = lowerCaseFactors %>% filter(lowerCaseFactors$notes == "converted from inches")
View(lowerCaseFactors.switchedunits)
View(lowerCaseFactors.switchedunits)
lowerCaseFactors.switchedunits =  as.factor(gsub("in", "cm", lowerCaseFactors.switchedunits$units);
lowerCaseFactors.switchedunits =  as.factor(gsub("in", "cm", lowerCaseFactors.switchedunits$units));
lowerCaseFactors = lowerCaseFactors[-which(row(lowerCaseFactors)%in% row(lowerCaseFactors.switchedunits)),]
?row
measure = read.csv(paste0(path.to.secret, "measure-students.txt"), header = T, sep = "|", quote = "")
View(measure)
measure.clean = cleanStudentMeasureData(measure);
View(measure.clean)
measure[336,]
lowerCaseFactors[336,]
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
lowerCaseFactors$units[336,] = "cm" ;
##fix mislabeled units
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure$units = as.factor(gsub("cm", "in", measure$units));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.clean = cleanStudentMeasureData(measure);
measure = read.csv(paste0(path.to.secret, "measure-students.txt"), header = T, sep = "|", quote = "")
measure.clean = cleanStudentMeasureData(measure);
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
lowerCaseFactors$units[336] = c("cm") ;
##fix mislabeled units
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure$units = as.factor(gsub("cm", "in", measure$units));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure = read.csv(paste0(path.to.secret, "measure-students.txt"), header = T, sep = "|", quote = "")
measure.clean = cleanStudentMeasureData(measure);
measure = read.csv(paste0(path.to.secret, "measure-students.txt"), header = T, sep = "|", quote = "")
#functions needed
cm.to.in = function(x){
y=x/2.54;
y;
}
convertMeasures = function(nums){
for(i in 1:nscan){
if(nums$units[i] == "cm"){
nums[i,c(2:num.cols)] = cm.to.in(nums[i, c(2:num.cols)]);
}
}
nums;
}
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
##fix mislabeled units
lowerCaseFactors$units[336] = c("cm") ;
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure$units = as.factor(gsub("cm", "in", measure$units));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
##fix mislabeled units
lowerCaseFactors$units[336] = c("cm") ;
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.clean = cleanStudentMeasureData(measure);
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors$ethnicity));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
##fix mislabeled units
lowerCaseFactors$units[336] = c("cm") ;
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.clean = cleanStudentMeasureData(measure);
summary(measure.clean);
cleanStudentMeasureData = function(measure){
filter = Filter(is.factor, measure);
## functions that apply to all factors, case fix, rm quotes, correct NA, change equal to both
lowerCaseFactors = as.data.frame(lapply(filter, tolower));
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("\"", "", x)))
lowercaseFactors$notes = as.factor(lowerCaseFactors$notes);
lowerCaseFactors = as.data.frame (sapply (lowerCaseFactors, function (x) gsub ("equal", "both", x)))
## stepwise through the variables list
#units abbreviated as cm and in only
lowerCaseFactors$units = as.factor(gsub("ches", "", lowerCaseFactors$units))
lowerCaseFactors$units = as.factor(gsub("ch", "", lowerCaseFactors$units))
#gender written only as lowercase full word #non-binary is single obeservation, already written out
lowerCaseFactors$gender = recode(lowerCaseFactors$gender, f = "female", m = "male");
# replacing the weird n/a with NA in side
lowerCaseFactors$side = as.factor(gsub ("n/a", "NA", lowerCaseFactors$side));
#make combo eye color consistent
lowerCaseFactors$eye_color = as.factor(gsub ("-", "/", lowerCaseFactors$eye_color));
#correct mispellings in swinging sides
lowerCaseFactors$swinging = as.factor(gsub ("leftt", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("let", "left", lowerCaseFactors$swinging));
lowerCaseFactors$swinging = as.factor(gsub ("rigth", "right", lowerCaseFactors$swinging));
#correct misspellings in ethnicity
lowerCaseFactors$ethnicity = as.factor(gsub ("asain", "asian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("white", "caucasian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("caucasian non-hispanic", "caucasian", lowerCaseFactors$ethnicity));
lowerCaseFactors$ethnicity = as.factor(gsub ("caucasian italian", "caucasian", lowerCaseFactors$ethnicity));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
##fix mislabeled units
lowerCaseFactors$units[336] = c("cm") ;
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nscan = length(nums$units);
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
num.cols = ncol(nums);
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
collapseCols = c("hand.length.left", "measure$hand.length.right", "hand.width.left", "hand.width.right", "floor.armpit.left",
"floor.armpit.right", "hand.elbow.left", "hand.elbow.right", "elbow.armpit.left", "elbow.armpit.right",
"floor.kneepit.left", "floor.kneepit.right", "floor.hip.left", "floor.hip.right", "arm.reach.left", "arm.reach.right", "foot.length.left", "foot.length.right",
"units")
measure = measure[,-which(names(measure) %in% collapseCols)];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.clean = cleanStudentMeasureData(measure);
summary(measure.clean);
git clone https://github.com/MonteShaffer/WSU_STATS419_FALL2020.git
setwd("~/.git/STAT419/project-measure")
knitr::opts_chunk$set(echo = TRUE)
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, quote="", sep="|");
#path.github = "https://raw.githubusercontent.com/this-IS-YOUR-PATH-TO-GITHUB/";
#source_url( paste0(path.github,"master/functions/functions-project-measure.R") );
# this is your function
# put in the same "units"
# merge left/right
# build proportion data
# and so on ...
# measure.df = prepareMeasureData(measure);
