lowerCaseFactors$ethnicity = as.factor(gsub ("caucasian italian", "caucasian", lowerCaseFactors$ethnicity));
## Assuming that the eye color and dominance for person 87 were just switched
miscolor= lowerCaseFactors$eye[87];
misdomeye = lowerCaseFactors$eye_color[87];
lowerCaseFactors$eye[87] = misdomeye;
lowerCaseFactors$eye_color[87] = miscolor;
##fix mislabeled units
lowerCaseFactors$units[336] = c("cm") ;
measure = measure[, -which(names(measure) %in% names(filter))];
measure = as.data.frame(cbind(lowerCaseFactors, measure));
##convert cm to in
nums = as.data.frame(measure[,c(4,12:34)]);
nums$units = as.character(nums$units)
convertMeasures <- function(nums) {
nscan = length(nums$units);
num.cols = ncol(nums);
for(i in 1:nscan){
if(nums$units[i] == "cm"){
nums[i,c(2:num.cols)] = cm.to.in(nums[i, c(2:num.cols)]);
}
}
nums;
}
nums.new = convertMeasures(nums);
measure = measure[, -which(names(measure) %in% names(nums.new))]
measure = as.data.frame(cbind(measure, nums.new));
measure = unique(measure);
measure = measure[unique(measure$person_id),];
#data collapsing
measure$hand.length = (measure$hand.length.left + measure$hand.length.right)/2;
measure$hand.width = (measure$hand.width.left + measure$hand.width.right)/2;
measure$floor.armpit = (measure$floor.armpit.left + measure$floor.armpit.right)/2;
measure$hand.elbow = (measure$hand.elbow.left +measure$hand.elbow.right)/2;
measure$elbow.armpit = (measure$elbow.armpit.left+ measure$elbow.armpit.right)/2;
measure$floor.kneepit = (measure$floor.kneepit.left+measure$floor.kneepit.right)/2;
measure$floor.hip = (measure$floor.hip.left+measure$floor.hip.right)/2;
measure$arm.reach = (measure$arm.reach.left + measure$arm.reach.right)/2;
measure$foot.length = (measure$foot.length.left+measure$foot.length.right)/2;
measure = measure[complete.cases(measure$arm.span.NA),];
measure = measure[complete.cases(measure$height.NA),];
measure$ape.index = measure$arm.span.NA - measure$height.NA;
measure;
}
measure.df = prepareMeasureData(measure);
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, quote="", sep="|");
source(file = "https://raw.githubusercontent.com/lindseymaek/STAT419/master/functions/functions-project-measure.R",local = F);
measure.df = prepareMeasureData(measure);
measure.scale = scale(measure[,c(4:26)], scale = measure$height.NA)
measure.scale = scale(measure[,c(4:26)], scale = measure.df$height.NA)
measure.scale = scale(measure.df[,c(4:26)], scale = measure.df$height.NA)
summary(measure.df)
head(measure.df)
str(measure.df)
View(measure.df)
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, quote="", sep="|");
source(file = "https://raw.githubusercontent.com/lindseymaek/STAT419/master/functions/functions-project-measure.R",local = F);
measure.df = prepareMeasureData(measure);
str(measure.df)
View(measure.df)
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, quote="", sep="|");
source(file = "https://raw.githubusercontent.com/lindseymaek/STAT419/master/functions/functions-project-measure.R",local = F);
measure.df = prepareMeasureData(measure);
View(measure.df)
View(measure.df)
View(prepareMeasureData)
path.project = "/Users/lindseykornowske/.git/STAT419/project-measure/";
path.to.secret = path.to.secret = "/Users/lindseykornowske/Documents/FS Classes HW & Resources/STAT 419 Multivariate/_SECRET_/";
measure = utils::read.csv( paste0(path.to.secret, "measure-students.txt"), header=TRUE, quote="", sep="|");
source(file = "https://raw.githubusercontent.com/lindseymaek/STAT419/master/functions/functions-project-measure.R",local = F);
measure.df = prepareMeasureData(measure);
View(prepareMeasureData)
View(measure.df)
measure.scale = scale(measure.df[,c(15:46)], scale = measure.df$height.NA)
measure.scale = measure.df[,c(15:46)])/measure.df[,15];
measure.scale = measure.df[,c(15:46)]/measure.df[,15];
View(measure.scale)
measure.scale = as.data.frame(measure.df[,c(1:14,47)], measure.scale)
View(measure)
View(measure.scale)
measure.scale = as.data.frame(cbind(measure.df[,c(1:14,47)], measure.scale))
View(measure.scale)
means = lapply(measure.scale[,c(16:18,29,36,39:47)])
means = lapply(measure.scale[,c(16:18,29,36,39:47)], mean)
sd = lapply(measure.scale[,c(16:18,29,36,39:47)], sd)
View(means)
means = lapply(measure.scale[,c(16:18,29,36,39:47)], mean, rm.na = T);
View(means)
means = lapply(measure.scale[,c(16:18,29,36,39:47)], mean, rm.na = T);
View(means)
means = lapply(measure.scale[,c(16:18,29,36,39:47)], mean(rm.na = T));
means = lapply(X = measure.scale[,c(16:18,29,36,39:47)], mean(rm.na = T));
means = lapply(x = measure.scale[,c(16:18,29,36,39:47)], funs = mean(rm.na = T));
means = lapply(x = measure.scale[,c(16:18,29,36,39:47)], FUN = mean(rm.na = T));
means = lapply(x = measure.scale[,c(16:18,29,36,39:47)], FUN = mean, rm.na = T));
means = lapply(x = measure.scale[,c(16:18,29,36,39:47)], FUN = mean, rm.na = T);
means = lapply(x = measure.scale[,c(16:18,29,36,39:47)], mean, rm.na = T);
means = lapply(measure.scale[,c(16:18,29,36,39:47)], mean, rm.na = T);
View(means)
means = lapply(measure.scale, mean);
View(means)
means = measure.scale %>% summarise_if(is.numeric, mean)
View(means)
means = measure.scale %>% summarise_if(is.numeric, mean, na.rm = T)
View(means)
View(measure.scale)
means = measure.scale[,c(16:18,29,36, 39:47)] %>% summarise_if(is.numeric, mean, na.rm = T)
View(means)
View(measure.df)
means = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric, mean, na.rm = T)
View(means)
sd = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric,sd, na.rm = T)
sd = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric, sd, na.rm = T)
sd = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric, FUN = sd, na.rm = T)
means = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric, sd, na.rm = T)
means = measure.df[,c(15:17,28,35, 38:46)] %>% summarise_if(is.numeric, mean, na.rm = T)
View(means)
means = round(means, 1);
View(means)
measure.collapsed = measure.df[,c(15:17,28,35, 38:46)]
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = ncols(measure.collapsed);
summary = data.frame();
row.names(summary) = names;
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
row.names(summary) = names;
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
rows(summary) = names;
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
row.names(summary) = names;
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
summary;
}
summarizeMeanSD(measure.collapsed)
summary = data.frame();
row.names(summary) = names;
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
row.names(summary) = names;
summary;
}
summarizeMeanSD(measure.collapsed)
n = length(measure.collapsed);
names = colnames(measure.collapsed);
row.names(summary) = names;
summary = row.names(names);
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary$mean[i] = mean(measure.collapsed[,i]);
summary$sd[i] = mean(measure.collapsed[,i]);
}
summary = row.names(names);
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i]);
summary$sd[2,i] = mean(measure.collapsed[,i]);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
View(measure.df)
View(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i]);
summary[2,i] = sd(measure.collapsed[,i]);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i], rm.na = T);
summary[2,i] = sd(measure.collapsed[,i]);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i], na.rm = T);
summary[2,i] = sd(measure.collapsed[,i]);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i], na.rm = T);
summary[2,i] = sd(measure.collapsed[,i], na.rm = T);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round(mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = sd(measure.collapsed[,i], na.rm = T);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summary[1,i] = round(mean(measure.collapsed[,i], na.rm = T), digits = 1);
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round(mean(measure.collapsed[,i], na.rm = T));
summary[2,i] = sd(measure.collapsed[,i], na.rm = T);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = mean(measure.collapsed[,i], na.rm = T);
summary[2,i] = sd(measure.collapsed[,i], na.rm = T);
}
colnames(summary)= names;
round(summary[1,], 1);
round(summary[2,], 2);
summary;
}
summarizeMeanSD(measure.collapsed)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round( mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = round( sd(measure.collapsed[,i], na.rm = T), 2);
}
colnames(summary)= names;
summary;
}
summarizeMeanSD(measure.collapsed)
measure.scale = measure.collapsed/measure.collapsed[,15];
View(measure.collapsed)
measure.scale = measure.collapsed/measure.collapsed[,1];
View(measure.scale)
library(Hmisc);
my.corr = rcorr( as.matrix(measure.scale), type="pearson");
str(my.corr);
my.corr.r = my.corr$r;
my.corr.pval = my.corr$P;
my.corr.r;
my.corr.pval;
my.corr.r;
View(measure.df)
View(measure.df)
measure.rl = measure.df[,c(4,7,18:21,22:25)];
View(measure.rl)
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
View(measure.rl)
measure.rl$arm.diff = measure.rl$right.arm - measure.rl$left.arm;
measure.rl$hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl$arm.diff = measure.rl$right.arm - measure.rl$left.arm;
measure.rl$hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl;
measure.rl = complete.cases(measure.rl);
measure.rl
measure.rl = measure.df[,c(4,7,18:21,22:25)];
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$arm.diff = measure.rl$right.arm - measure.rl$left.arm;
measure.rl$hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl.diff = measure.rl[,c(1,2,13,14)];
measure.rl.diff = measure.rl[,c(1,2,9,10)];
View(measure.rl.diff)
measure.rl = measure.df[,c(4,7,18:21,22:25)];
measure.rl$left.arm = measure.rl$hand.elbow.left+measure.rl$elbow.armpit.left;
measure.rl$right.arm = measure.rl$hand.elbow.right + measure.rl$elbow.armpit.right;
measure.rl = measure.rl[,c(1:6,11,12)];
measure.rl$RminusL.arm.diff = measure.rl$right.arm - measure.rl$left.arm;
measure.rl$RminusL.hand.diff = measure.rl$hand.length.right - measure.rl$hand.length.left;
measure.rl.diff = measure.rl[,c(1,2,9,10)];
measure.rl.diff
ndiffs = length(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} else {
measure.rl.diff$writingNum[i] = -1;
}
}
View(measure.rl.diff)
ndiffs = length(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} else {
measure.rl.diff$writingNum[i] = -1;
}
}
View(measure.rl.diff)
ndiffs = length(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} if (measure.rl.diff$writing[i] == "left") {
ndiffs = length(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} else if (measure.rl.diff$writing[i] == "left") {
measure.rl.diff$writingNum[i] = -1;
}
}
View(measure.rl.diff)
ndiffs = length(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} else if (measure.rl.diff$writing[i] == "left") {
measure.rl.diff$writingNum[i] = c(-1);
}
measure.rl.diff;
}
measure.rl.diff
ndiffs = nrow(measure.rl.diff);
ndiffs = nrow(measure.rl.diff);
for (i in 1:ndiffs) {
if (measure.rl.diff$writing[i] == "right"){
measure.rl.diff$writingNum[i] = 1;
} else if (measure.rl.diff$writing[i] == "left") {
measure.rl.diff$writingNum[i] = c(-1);
}
measure.rl.diff;
}
measure.rl.diff
for (i in 1:ndiffs) {
if (measure.rl.diff$swinging[i] == "right"){
measure.rl.diff$swingingNum[i] = 1;
} else if (measure.rl.diff$swinging[i] == "left") {
measure.rl.diff$swingingNum[i] = c(-1);
}
measure.rl.diff;
}
measure.rl.diff
measure.rl.diff = measure.rl.diff[,-c(1,2)];
my.corr = rcorr( as.matrix(measure.rl.diff), type="pearson");
str(my.corr);
my.corr.r = my.corr$r;
my.corr.pval = my.corr$P;
my.corr.r;
my.corr = rcorr( as.matrix(measure.rl.diff), type="pearson", na.rm = T);
my.corr = rcorr( as.matrix(measure.rl.diff), type="pearson");
my.corr.r;
my.corr.pval; #all correlations are significant
my.corr.r;
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
View(measure.climbers)
summarizeMeanSD(measure.climbers);
View(measure.climbers)
measure.climbers = mesaure.climbers[,c(2:4)];
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = nrow(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round( mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = round( sd(measure.collapsed[,i], na.rm = T), 2);
}
colnames(summary)= names;
rownames(summary) = c("mean", "standard deviation")
summary;
}
summarizeMeanSD(measure.climbers);
measure.climbers = measure.climbers[,c(2:4)];
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = nrow(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round( mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = round( sd(measure.collapsed[,i], na.rm = T), 2);
}
colnames(summary)= names;
rownames(summary) = c("mean", "standard deviation");
summary;
}
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = measure.climbers[,c(2:4)];
View(measure.climbers)
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = nrow(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round( mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = round( sd(measure.collapsed[,i], na.rm = T), 2);
}
colnames(summary)= names;
#rownames(summary) = c("mean", "standard deviation");
summary;
}
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
View(measure.climbers)
measure.climbers = measure.climbers[,c(2:4)];
View(measure.climbers)
summarizeMeanSD(measure.climbers);
summarizeMeanSD = function(measure.collapsed) {
names = colnames(measure.collapsed);
n = length(measure.collapsed);
summary = data.frame();
for(i in 1:n) {
summary[1,i] = round( mean(measure.collapsed[,i], na.rm = T), 1);
summary[2,i] = round( sd(measure.collapsed[,i], na.rm = T), 2);
}
colnames(summary)= names;
rownames(summary) = c("mean", "standard deviation");
summary;
}
measure.climbers = utils::read.csv( paste0(path.to.secret, "measure_climbers.csv"), header=TRUE, quote="", sep=",");
measure.climbers = measure.climbers[,c(2:4)];
summarizeMeanSD(measure.climbers);
mean(measure.df$ape.index)
sd(measure.df$ape.index)
